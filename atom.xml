<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><id>https://chriswmartin.github.io</id><title>Textfile</title><updated>2020-12-13T02:28:06.762927+00:00</updated><author><name>Chris Martin</name><email>chrismartin@riseup.net</email></author><link href="https://chriswmartin.github.io" rel="alternate"/><generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator><subtitle>A blog by Chris Martin</subtitle><entry><id>https://chriswmartin.github.io/./posts/hello-world.html</id><title>Hello world
</title><updated>2020-12-05T00:00:00-05:00</updated><content type="CDATA"><![CDATA[<p>2020-12-05</p>

<h1>Hello world</h1>

<p>This is just a post to try out a super simple static site generator I am working on. Check out the code <a href="https://github.com/chriswmartin/chriswmartin.github.io">here</a>!</p>

<div class="codehilite"><pre><span></span><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>

<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat...</p>
]]></content><link href="https://chriswmartin.github.io/./posts/hello-world.html" rel="alternate"/><published>2020-12-05T00:00:00-05:00</published></entry><entry><id>https://chriswmartin.github.io/./posts/readme.html</id><title>Readme
</title><updated>2020-12-06T00:00:00-05:00</updated><content type="CDATA"><![CDATA[<p>2020-12-06</p>

<h1>Readme</h1>

<h2>Usage</h2>

<h3>Add markdown files</h3>

<p>Move markdown files to the <code>content</code> directory. If the first line of your file is a timestamp in the format <code>%Y-%m-%d</code> (for example: "2020-12-01") it will be treated as that post's publish date. Otherwise timestamps will be generated from the file's last modification date. Posts titles will be automatically parsed from file's first <code>h1</code> tag.</p>

<p>Here is an example post:</p>

<pre><code>2020-12-01

# Blog post title

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat...
</code></pre>

<h3>Modify templates</h3>

<p>If desired, modify the header, footer, and css files found in the <code>templates/</code> directory.</p>

<h3>Update site variables</h3>

<p>Change the global variables at the top of <code>make.py</code> to reflect your site's URL. </p>

<h3>Install dependencies &amp; generate site</h3>

<div class="codehilite"><pre><span></span><code>pip3 install -r requirements.txt
python3 make.py
</code></pre></div>

<p>All generated files will be placed in the <code>public/</code> directory.</p>
]]></content><link href="https://chriswmartin.github.io/./posts/readme.html" rel="alternate"/><published>2020-12-06T00:00:00-05:00</published></entry><entry><id>https://chriswmartin.github.io/./posts/aoc-2020-day11.html</id><title>Advent of Code 2020 Day 11 visualization
</title><updated>2020-12-11T00:00:00-05:00</updated><content type="CDATA"><![CDATA[<p>2020-12-11</p>

<h1>Advent of Code 2020 Day 11 visualization</h1>

<p>Advent of Code's day 11 challenge -- <a href="https://adventofcode.com/2020/day/11">Seating System</a> was a type of <a href="https://en.wikipedia.org/wiki/Cellular_automaton">cellular automata</a> task where one needed to model the eventual seating positions of individuals waiting to board a ferry.</p>

<p>To create our visualizations first we generate a new, random initial seating layout based off of the AoC examples</p>

<div class="codehilite"><pre><span></span><code><span class="k">def</span> <span class="nf">generate_layout</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">):</span>
    <span class="n">chars</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;L&#39;</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">]</span>
    <span class="n">layout</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
        <span class="n">column</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">columns</span><span class="p">):</span>
            <span class="n">column</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">chars</span><span class="p">))</span>
        <span class="n">layout</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
    <span class="k">return</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>
</code></pre></div>

<p>this returns a two dimensional array like</p>

<pre><code>[
    ['.', '.', '.', 'L', '.', 'L', '.', 'L', '.', 'L'],
    ['.', 'L', 'L', 'L', 'L', 'L', 'L', '.', '.', '.'],
    ['.', '.', 'L', 'L', '.', 'L', 'L', 'L', 'L', 'L'],
    ['L', 'L', 'L', '.', 'L', 'L', 'L', 'L', 'L', '.'],
    ['.', '.', 'L', 'L', '.', 'L', '.', '.', 'L', 'L'],
    ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
    ['L', '.', '.', 'L', '.', 'L', '.', 'L', 'L', 'L'],
    ['.', 'L', 'L', '.', '.', '.', '.', 'L', '.', 'L'],
    ['.', '.', 'L', '.', 'L', 'L', 'L', '.', '.', '.'],
    ['L', 'L', 'L', '.', 'L', 'L', '.', '.', 'L', 'L']
]
</code></pre>

<p>next we have <code>print_layout()</code> which gives us a nicer representation of our seats</p>

<div class="codehilite"><pre><span></span><code><span class="k">def</span> <span class="nf">print_layout</span><span class="p">(</span><span class="n">seat_array</span><span class="p">):</span>
    <span class="n">layout</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">seat_array</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">for</span> <span class="n">seat</span> <span class="ow">in</span> <span class="n">column</span><span class="p">:</span>
          <span class="n">c</span> <span class="o">+=</span> <span class="n">seat</span>
        <span class="n">layout</span> <span class="o">+=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">c</span>
    <span class="k">return</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span> 

<span class="sd">&#39;&#39;&#39;</span>
<span class="sd">...L.L.L.L</span>
<span class="sd">.LLLLLL...</span>
<span class="sd">..LL.LLLLL</span>
<span class="sd">LLL.LLLLL.</span>
<span class="sd">..LL.L..LL</span>
<span class="sd">L.LL.LL.LL</span>
<span class="sd">L..L.L.LLL</span>
<span class="sd">.LL....L.L</span>
<span class="sd">..L.LLL...</span>
<span class="sd">LLL.LL..LL</span>
<span class="sd">&#39;&#39;&#39;</span>
</code></pre></div>

<p>The fun thing about this function is that is gives us lot of flexibility in how we represent this data. For example we can draw our seats using <a href="https://en.wikipedia.org/wiki/Block_Elements">unicode block elements</a>.</p>

<div class="codehilite"><pre><span></span><code><span class="k">def</span> <span class="nf">print_layout</span><span class="p">(</span><span class="n">seat_array</span><span class="p">):</span>
    <span class="n">layout</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="n">seat_array</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
        <span class="k">for</span> <span class="n">seat</span> <span class="ow">in</span> <span class="n">column</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">seat</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span><span class="p">:</span> <span class="n">c</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span>
            <span class="k">if</span> <span class="n">seat</span> <span class="o">==</span> <span class="s1">&#39;#&#39;</span><span class="p">:</span> <span class="n">c</span> <span class="o">+=</span> <span class="s1">&#39;▓&#39;</span>
            <span class="k">if</span> <span class="n">seat</span> <span class="o">==</span> <span class="s1">&#39;L&#39;</span><span class="p">:</span> <span class="n">c</span> <span class="o">+=</span> <span class="s1">&#39;▒&#39;</span>    
        <span class="n">layout</span> <span class="o">+=</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">c</span>
    <span class="k">return</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>

<span class="sd">&#39;&#39;&#39;</span>
<span class="sd"> ▓ ░▓▓░▓ ▓</span>
<span class="sd">▓ ░ ░░ ░ ▓</span>
<span class="sd">▓ ░     ░</span>
<span class="sd">░ ░▓ ░   ░</span>
<span class="sd">▓░ ░░ ▓▓░▓</span>
<span class="sd">░▓▓  ░▓░</span>
<span class="sd"> ░░ ░ ░░▓</span>
<span class="sd">▓▓  ░▓</span>
<span class="sd">    ░░ ▓░░</span>
<span class="sd">    ▓░  ░▓</span>
<span class="sd">&#39;&#39;&#39;</span>
</code></pre></div>

<p>Then we can create an animation of our generated layouts reaching equilibrium</p>

<div class="codehilite"><pre><span></span><code><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
  <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s1">&#39;clear&#39;</span><span class="p">)</span>

  <span class="n">rows</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s1">&#39;stty size&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>  
  <span class="n">layout</span> <span class="o">=</span> <span class="n">generate_layout</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">columns</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">rows</span><span class="p">))</span>
  <span class="n">seats</span> <span class="o">=</span> <span class="n">model_seats</span><span class="p">(</span><span class="n">layout</span><span class="p">)</span>

  <span class="n">occupied_seat_counts</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
    <span class="n">seats</span> <span class="o">=</span> <span class="n">model_seats</span><span class="p">(</span><span class="n">seats</span><span class="p">)</span> <span class="c1"># model the next seat layout</span>

    <span class="n">layout</span> <span class="o">=</span> <span class="n">print_layout</span><span class="p">(</span><span class="n">seats</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">layout</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span> <span class="c1"># display our new seat layout</span>

    <span class="n">occupied_seats</span> <span class="o">=</span> <span class="n">layout</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="s1">&#39;▓&#39;</span><span class="p">)</span> <span class="c1"># this should be whichever</span>
                                       <span class="c1"># char you use to represent</span>
                                       <span class="c1"># occupied seats</span>
    <span class="k">if</span> <span class="n">occupied_seats</span> <span class="o">==</span> <span class="n">occupied_seat_counts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
      <span class="k">break</span> <span class="c1"># if the number of occupied seats has not changed since</span>
            <span class="c1"># the previous run break and start on new seating layout</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">occupied_seat_counts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">occupied_seats</span><span class="p">)</span>
</code></pre></div>

<p>You can see the full code <a href="https://gist.github.com/chriswmartin/3e0b42f64bbbbd215d72e0ee8d5100e2">here</a> and you can run the code live by clicking the play button below.</p>

<iframe frameborder="0" width="100%" height="500px" src="https://repl.it/@0xcm/aoc2020day11part1?lite=true&outputonly=1"></iframe>
]]></content><link href="https://chriswmartin.github.io/./posts/aoc-2020-day11.html" rel="alternate"/><published>2020-12-11T00:00:00-05:00</published></entry></feed>